name: CI/CD Kittygram

on:
  push:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_backend
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_frontend
  GATEWAY_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_gateway

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff
          pip install -r backend/requirements.txt

      - name: Lint backend with Ruff
        run: |
          ruff check backend/

      - name: Run backend tests
        env:
          POSTGRES_DB: kittygram
          POSTGRES_USER: kitty
          POSTGRES_PASSWORD: kitty123
          DB_NAME: kittygram
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          cd backend
          python manage.py test

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Run frontend tests
        run: |
          cd frontend
          npm ci
          npm test -- --watchAll=false

      - name: Build and push backend image
        run: |
          docker build -t $BACKEND_IMAGE ./backend
          docker push $BACKEND_IMAGE

      - name: Build and push frontend image
        run: |
          docker build -t $FRONTEND_IMAGE ./frontend
          docker push $FRONTEND_IMAGE

      - name: Build and push gateway image
        run: |
          docker build -t $GATEWAY_IMAGE ./nginx
          docker push $GATEWAY_IMAGE

      - name: Notify on success via Telegram
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="CI/CD для Kittygram завершён успешно"